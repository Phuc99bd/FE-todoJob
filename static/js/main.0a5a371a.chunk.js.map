{"version":3,"sources":["services/auth/reducer.js","services/auth/status.js","services/auth/actionType.js","services/job/reducer.js","services/job/actionType.js","services/reducers.js","services/store.js","services/auth/seletor.js","components/auth/auth.js","services/auth/action.js","containers/auth/auth.js","containers/app/App.js","serviceWorker.js","index.js"],"names":["initialState","loading","error","success","status","authReducer","state","action","type","user","console","log","arrJob","numOfJob","keyword","pages","sortByName","sortByActive","jobReducer","actionFefeshArr","Object","assign","item","filter","i","_id","allReducers","combineReducers","auth","job","store","createStore","compose","applyMiddleware","thunk","Auth","useSelector","AuthItem","useState","email","setEmail","password","setPassword","errorEmail","setErrorEmail","errorPassword","setErrorPassword","refEmail","useRef","refPassword","authProps","propAuth","dispatch","useDispatch","submitForm","e","preventDefault","current","focus","a","axios","post","res","data","loginUser","to","Spinner","animation","variant","Container","Row","className","Col","md","Form","Group","controlId","Label","Control","name","ref","placeholder","onChange","target","value","required","Text","Alert","show","showError","Button","onClick","Component","defaults","baseURL","interceptors","request","use","config","window","location","href","tokenKey","localStorage","getItem","headers","response","token","setItem","Promise","reject","App","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0a5a371a.chunk.js","sourcesContent":["import {\r\n    AUTH_LOGIN_REQUEST,\r\n    AUTH_FALTURE,\r\n    AUTH_LOGIN_COMPLETED,\r\n    AUTH_LOGOUT,\r\n    REGISTER_COMPLETED\r\n} from \"./actionType\";\r\nimport {\r\n    LOGIN,\r\n    REGISTER\r\n} from \"./status\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    error: null,\r\n    success: null,\r\n    status: LOGIN\r\n}\r\n\r\nconst authReducer = (state = initialState , action) => {\r\n    switch (action.type) {\r\n        case AUTH_LOGIN_REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case AUTH_LOGIN_COMPLETED:\r\n            return {...state, user: action.user,loading: false}\r\n        case AUTH_FALTURE:\r\n            console.log(action);\r\n            return {...state,loading: false, error: action.error}\r\n        case AUTH_LOGOUT:\r\n            return {...state, user: ''}\r\n        case REGISTER_COMPLETED:\r\n            return {...state,success: action.success}\r\n        default: \r\n            return state;\r\n    }\r\n}\r\nexport default authReducer","export const LOGIN = 'LOGIN'\r\nexport const REGISTER = 'REGISTER'","export const AUTH_LOGIN_REQUEST = 'AUTH_LOGIN_REQUEST'\r\nexport const AUTH_LOGIN_COMPLETED = 'AUTH_LOGIN_COMPLETED'\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT'\r\nexport const AUTH_FALTURE = 'AUTH_FALTURE'\r\nexport const REGISTER_COMPLETED= 'REGISTER_COMPLETED'","import {\r\n    ADD_JOB,\r\n    DELETE_JOB,\r\n    SEARCH_JOB,\r\n    CHANGE_STATUS,\r\n    SORT_BY_ACTIVE,\r\n    SORT_BY_NAME,\r\n    UPDATE_JOB,\r\n    GET_JOB,\r\n    PAGINATION\r\n } from \"./actionType\";\r\n\r\nlet initialState = {\r\n    arrJob: [],\r\n    numOfJob: 1,\r\n    keyword: \"\",\r\n    pages: 1,\r\n    sortByName:0,\r\n    sortByActive: 0,\r\n    status: false\r\n}\r\n\r\nconst jobReducer = (state = initialState, action) => {\r\n    let actionFefeshArr = {...action};\r\n    delete actionFefeshArr.type;\r\n    switch (action.type) {\r\n        case GET_JOB:\r\n            return Object.assign(state,actionFefeshArr);\r\n        case SEARCH_JOB:\r\n            return Object.assign(state,actionFefeshArr);\r\n        case ADD_JOB:\r\n            return {...state,arrJob: [...state.arrJob,action.item]}\r\n        case DELETE_JOB:\r\n            return {...state,arrJob: state.arrJob.filter(i=>{\r\n                return i._id !== action._id\r\n            })}\r\n        case PAGINATION:\r\n            return Object.assign(state,actionFefeshArr)\r\n        case CHANGE_STATUS:\r\n            return {...state,status: !state.status}\r\n        case UPDATE_JOB:\r\n            state.arrJob.filter(i=>{\r\n                if(i._id === action.item._id){\r\n                    i = Object.assign(i,action.item) \r\n                }\r\n\r\n            })\r\n            return state;\r\n        case SORT_BY_NAME:\r\n            return Object.assign(state,actionFefeshArr)\r\n        case SORT_BY_ACTIVE:\r\n            return Object.assign(state,actionFefeshArr)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default jobReducer","export const CHANGE_STATUS = 'CHANGE_STATUS'\r\nexport const ADD_JOB = 'ADD_JOB'\r\nexport const UPDATE_JOB = 'UPDATE_JOB'\r\nexport const DELETE_JOB = 'DELETE_JOB'\r\nexport const SEARCH_JOB = 'SEARCH_JOB'\r\nexport const SORT_BY_NAME = 'SORT_BY_NAME'\r\nexport const SORT_BY_ACTIVE = 'SORT_BY_ACTIVE'\r\nexport const GET_JOB= 'GET_JOB'\r\nexport const PAGINATION= 'PAGINATION'\r\n","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./auth/reducer\";\r\nimport jobReducer from \"./job/reducer\"\r\n\r\nconst allReducers = combineReducers({\r\n    auth: authReducer,\r\n    job: jobReducer\r\n})\r\nexport default allReducers","import thunk from \"redux-thunk\";\r\nimport {applyMiddleware,createStore,compose} from \"redux\";\r\nimport allReducers from \"./reducers\";\r\n\r\n\r\nconst store = createStore(\r\n    allReducers,\r\n    compose(applyMiddleware(thunk))\r\n)\r\n\r\n\r\nexport default store","import { useSelector } from \"react-redux\";\r\n\r\n const Auth =()=> {\r\n    return {auth: useSelector(state=> state.auth)}\r\n}\r\nexport default Auth;","import React, { Component,useState,useRef} from \"react\";\r\nimport { Container, Row, Col, Form, Button,Alert,Spinner } from \"react-bootstrap\";\r\nimport { loginUser } from \"../../services/auth/action\";\r\nimport propAuth from \"../../services/auth/seletor\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst AuthItem = () =>{\r\n  const [email,setEmail ]=useState(\"\"),\r\n   [password,setPassword] =useState(\"\"),\r\n   [errorEmail,setErrorEmail] = useState(\"\"),\r\n   [errorPassword,setErrorPassword] = useState(\"\"),\r\n   refEmail = useRef(),\r\n   refPassword = useRef();\r\n   let authProps = propAuth().auth;\r\n   let dispatch = useDispatch();\r\n   \r\n  const submitForm = (e) => {\r\n    e.preventDefault();\r\n    if (email === \"\") {\r\n        setErrorEmail(\"Email không hợp lệ.\");\r\n        refEmail.current.focus();\r\n        return false;\r\n    }else{  setErrorEmail(\"\"); }\r\n    if (password === \"\") {\r\n        setErrorPassword(\"Password không được trống.\");\r\n        return false;\r\n    }else{  setErrorPassword(\"\"); }\r\n    dispatch(loginUser(email,password));\r\n  };\r\n\r\n  const showError = ()=>{\r\n      if(authProps.error){\r\n        return <Alert show={true} variant=\"danger\">{authProps.error}</Alert>\r\n      }\r\n  }\r\n\r\n  if(authProps.user && authProps.user != ''){\r\n      return <Redirect to=\"/\"/>\r\n  }\r\n\r\n  if (authProps.loading) {\r\n    return <Spinner animation=\"grow\" variant=\"primary\" />\r\n  }\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-md-center\">\r\n        <Col md={6}>\r\n          <h1>Đăng nhập Todo Job</h1>\r\n          <Form>\r\n            <Form.Group controlId=\"controlEmail\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                name=\"email\"\r\n                ref={refEmail}\r\n                placeholder=\"Enter email\"\r\n                onChange={e => setEmail(e.target.value)} required\r\n              ></Form.Control>\r\n              <Form.Text className=\"text-danger\">{errorEmail}</Form.Text>\r\n            </Form.Group>\r\n            <Form.Group controlId=\"controlEmail\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Enter password\"\r\n                ref={refPassword}\r\n                onChange={e => setPassword(e.target.value)} required\r\n              ></Form.Control>\r\n              <Form.Text className=\"text-danger\">{errorPassword}</Form.Text>\r\n            </Form.Group>\r\n            {showError()}\r\n            <Form.Group>\r\n              <Button\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                onClick={(e) => submitForm(e)}\r\n              >\r\n                Login\r\n              </Button>\r\n            </Form.Group>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default AuthItem;\r\n","import axios from \"axios\";\r\n\r\nimport { \r\n    AUTH_FALTURE,\r\n    AUTH_LOGIN_COMPLETED,\r\n    AUTH_LOGIN_REQUEST,\r\n    REGISTER_COMPLETED\r\n} from \"./actionType\";\r\n\r\nexport const requestLogin = ()=>{\r\n    return {\r\n        type: AUTH_LOGIN_REQUEST\r\n    }\r\n}\r\nexport const loginErr =(error)=>{\r\n    return {\r\n        type: AUTH_FALTURE,\r\n        error: error\r\n    }\r\n}\r\nexport const loginSuccess = (user)=>{\r\n    return {\r\n        type: AUTH_LOGIN_COMPLETED,\r\n        user: user\r\n    }\r\n}\r\nexport const loginUser= (email,password)=>{\r\n    return async dispatch=>{\r\n        try{\r\n            dispatch(requestLogin())\r\n            const res = await axios.post(\"/login\",{email: email,password:password})\r\n            if(res.data.error)\r\n                dispatch(loginErr(res.data.error))\r\n            else{\r\n                dispatch(loginSuccess(res.data.user))\r\n            }\r\n        }catch(err){\r\n\r\n        }\r\n    }\r\n}","import AuthItem from \"../../components/auth/auth\";\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport default class Auth extends Component {\r\n    render() {\r\n        return (\r\n           <AuthItem/>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport { Provider } from \"react-redux\";\nimport store from \"../../services/store\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Auth from \"../auth/auth\";\n\naxios.defaults.baseURL = 'http://localhost:8000';\n\naxios.interceptors.request.use(config=>{\n  if(window.location.href === '/login'){\n    return config\n  }\n  const tokenKey = localStorage.getItem('tokenKey')\n  if (tokenKey) {\n    config.headers['x-access-token'] = tokenKey\n  }\n  return config\n})\n\naxios.interceptors.response.use(response => {\n  if (window.location.href === '/login') {\n    return response\n  }\n  const tokenKey = response.data?.token;\n  if (tokenKey) {\n    localStorage.setItem('tokenKey', tokenKey)\n  }\n  return response\n}, function (error) {\n  return Promise.reject(error)\n})\n\nclass App extends Component {\n  render(){\n    return (<Provider store={store}>\n      <Router>\n         <Route path=\"/login\" component={Auth} />\n       </Router>\n    </Provider>)\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <App/>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}